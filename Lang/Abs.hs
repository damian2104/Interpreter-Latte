

module Lang.Abs where

-- Haskell module generated by the BNF converter




newtype Ident = Ident String deriving (Eq, Ord, Show, Read)
data Program = Program [AllDef]
  deriving (Eq, Ord, Show, Read)

data AllDef = FunDef TopDef | VarDef TopVar
  deriving (Eq, Ord, Show, Read)

data TopVar = VarDecl Type [Item]
  deriving (Eq, Ord, Show, Read)

data TopDef = FnDef Type Ident [Arg] Block
  deriving (Eq, Ord, Show, Read)

data Arg = Arg Type Ident
  deriving (Eq, Ord, Show, Read)

data Block = Block [Stmt]
  deriving (Eq, Ord, Show, Read)

data Stmt
    = Empty
    | BStmt Block
    | Decl Type [Item]
    | Ass Ident Expr
    | Ret Expr
    | Cond Expr Stmt
    | CondElse Expr Stmt Stmt
    | While Expr Stmt
    | For Ident Expr Expr Stmt
    | SExp Expr
    | Prt Expr
    | FunDecl TopDef
    | Brk
    | Cont
  deriving (Eq, Ord, Show, Read)

data Value = NumVal Integer| StrVal String | BVal Bool
  deriving (Eq, Ord, Show, Read)
  
type RD_ONLY = Bool

type GLOBAL = Bool

data ValueWithFlag = ValueWithFlag Value RD_ONLY GLOBAL deriving (Eq, Ord, Show, Read)

data Item = NoInit Ident
  deriving (Eq, Ord, Show, Read)

data Type = Int | Str | Bool
  deriving (Eq, Ord, Show, Read)

data Expr
    = EVar Ident
    | ELitInt Integer
    | ELitTrue
    | ELitFalse
    | EApp Ident [Expr]
    | EString String
    | Neg Expr
    | Not Expr
    | EMul Expr MulOp Expr
    | EAdd Expr AddOp Expr
    | ERel Expr RelOp Expr
  deriving (Eq, Ord, Show, Read)

data AddOp = Plus | Minus
  deriving (Eq, Ord, Show, Read)

data MulOp = Times | Div | Mod
  deriving (Eq, Ord, Show, Read)

data RelOp = LTH | LE | GTH | GE | EQU | NE
  deriving (Eq, Ord, Show, Read)

